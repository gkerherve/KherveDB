name: Build and Publish KherveDB

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v1.1.0, etc.
  workflow_dispatch:  # Allows manual triggering

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build Windows executable
      run: |
        pyinstaller Main.spec

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v3
      with:
        name: KherveDB-Windows
        path: dist/KherveDB.exe

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build macOS executable
      run: |
        pyinstaller Main.spec

    - name: Create DMG (optional)
      run: |
        # Install create-dmg if you want DMG packaging
        # brew install create-dmg
        # create-dmg --volname "KherveDB" --window-pos 200 120 --window-size 800 400 --icon-size 100 --app-drop-link 600 185 "KherveDB.dmg" "dist/"

    - name: Upload macOS artifact
      uses: actions/upload-artifact@v3
      with:
        name: KherveDB-macOS
        path: dist/KherveDB

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build Linux executable
      run: |
        pyinstaller Main.spec

    - name: Upload Linux artifact
      uses: actions/upload-artifact@v3
      with:
        name: KherveDB-Linux
        path: dist/KherveDB

  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          KherveDB-Windows/KherveDB.exe
          KherveDB-macOS/KherveDB
          KherveDB-Linux/KherveDB
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional: Build and publish to PyPI if you want to distribute as a Python package
  publish-pypi:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Create setup.py if needed
      run: |
        # You'll need to create a setup.py file for PyPI distribution
        echo "Skipping PyPI upload - setup.py not configured"

    # Uncomment these steps if you set up PyPI distribution
    # - name: Build package
    #   run: python -m build
    #
    # - name: Publish to PyPI
    #   uses: pypa/gh-action-pypi-publish@release/v1
    #   with:
    #     password: ${{ secrets.PYPI_API_TOKEN }}